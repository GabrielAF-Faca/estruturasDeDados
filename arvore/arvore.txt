

##altura da arvore##

typedef struct no{
    int dado;
    struct no *esq;
    struct no *dir;
}Arvore;

int altura(Arvore *r){
    if(r){
        int altEsq = altura(r->esq);
        int altDir = altura(r->dir);

        if (altEsq > altDir) {
            return 1 + altEsq;
        } else {
            return 1 + altDir;
        }
    }
    return 0;
}

Arvore *localizar(int valor, Arvore *r){
    if(r){
        if (r->dado == valor){
            return r;
        }

        if (r->dado < valor){
            return localizar(valor, r->esq);
        } else {
            return localizar(valor, r->dir);
        }

    }
    return NULL;
}

int *contar_folhas(Arvore *r){
    if(r){

        if (!r->esq && !r->dir) return 1;
        
        return 0 + contar_folhas(r->esq) + contar_folhas(r->dir);

    }
    return 0;
}

int *contar_galhos(Arvore *r){
    if(r){

        if (r->esq || r->dir) 
        
        return contar_galhos(r->esq) + contar_galhos(r->dir);;
        
    }
    return 0;
}

int localizar_nivel(int valor, Arvore *r){
    if(r){

        if (r->dado == valor) return 0;
        
        if (r->dado < valor) {

            int resultado = localizar_nivel(valor, r->esq);

            if (resultado == -1) return -1;
            
            return 1 + resultado;

        } else {

            int resultado = localizar_nivel(valor, r->dir);

            if (resultado == -1) return -1;
            
            return 1 + resultado;

        }

    }
    return -1;
}